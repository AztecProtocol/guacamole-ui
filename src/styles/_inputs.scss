@import './colors';
@import './shapes';
@import './backgrounds';
@import './typography';
@import './layout';

@mixin input() {
  @include rounded-corner();
  position: relative;
  appearance: none;
  padding: 0;
  width: 100%;
  outline-width: 0;
  outline-color: transparent;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  box-shadow: none;
  background: $default-input-bg-color;
  border: $input-border-width solid $default-input-outline-color;
  color: $default-input-value-color;
  transition: border-color 0.2s ease-out;
  text-align: inherit;

  &:focus, &:hover {
    background: $default-input-active-bg-color;
    border-color: $default-input-active-outline-color;
    box-shadow: none;
  }

  &::placeholder {
    color: $default-input-placeholder-color;
  }
}

@function get-input-vertical-padding($size-key) {
  $size: map-get($input-size-map, $size-key);
  $line-height: get-line-height(map-get($input-font-size-key-map, $size-key));
  @return ($size - $line-height) / 2;
}

@function get-input-horizontal-padding($size-key) {
  @return get-spacing('s');
}

@mixin input-shape($size-key: $default-input-size-key) {
  $size: map-get($input-size-map, $size-key);
  $font-size-key: map-get($input-font-size-key-map, $size-key);
  @include font-size($font-size-key);
  padding: get-input-vertical-padding($size-key) get-input-horizontal-padding($size-key);
  height: $size;
}

@mixin input-theme($theme: 'default') {
  @if $theme == 'inline' {
    background: $inline-input-bg-color;
    border-color: transparent;
    color: $inline-input-value-color;

    &:focus, &:hover {
      background: $inline-input-active-bg-color;
      border-color: $inline-input-active-outline-color;
    }

    &::placeholder {
      color: $inline-input-placeholder-color;
    }
  } @else if $theme == 'dark' {
    background: $dark-input-bg-color;
    border-color: $dark-input-outline-color;
    color: $dark-input-value-color;

    &:focus, &:hover {
      background: $dark-input-active-bg-color;
      border-color: $dark-input-active-outline-color;
    }

    &::placeholder {
      color: $dark-input-placeholder-color;
    }
  }
}

@mixin input-focus($theme: 'default') {
  @if $theme == 'inline' {
    background: $inline-input-active-bg-color;
    border-color: transparent;
  } @else if $theme == 'dark' {
    background: $dark-input-active-bg-color;
    border-color: $dark-input-active-outline-color;
  } @else {
    border-color: $default-input-active-outline-color;
    box-shadow: none;
  }
}

@mixin input-disabled($theme: 'default') {
  @if $theme == 'inline' {
    background: rgba($inline-input-bg-color, 0.5);
    opacity: 0.7;

    &:focus, &:hover {
      border-color: transparent;
    }
  } @else if $theme == 'dark' {
    background: opacify($dark-input-bg-color, 0.5);
    border-color: opacify($dark-input-outline-color, 0.5);
    opacity: 0.7;

    &:focus, &:hover {
      border-color: opacify($dark-input-outline-color, 0.5);
    }
  } @else {
    opacity: 0.3;

    &:focus, &:hover {
      border-color: $default-input-outline-color;
    }
  }
}

@mixin input-status($status, $theme: 'default') {
  @if $status == 'focus' {
    @include input-focus($theme);
  } @else {
    $color: $default-input-outline-color;
    @if ($status == 'error') {
      $color: $error-input-color;
    } @else if ($status == 'focus') {
      $color: $focus-input-color;
    }
    border-color: $color;

    &:focus, &:hover {
      border-color: $color;
    }
  }
}
