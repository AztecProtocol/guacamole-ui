import fs from 'fs';
import path from 'path';
import jsToSass from './utils/jsToSass';
import {
  errorLog,
  successLog,
} from './utils/log';
import mergeCssConfig from './utils/mergeCssConfig';
import prettyPrint from './utils/prettyPrint';

const getFileHeader = () => {
  const processRoot = process.cwd();
  let thisFilename;
  const root = path.resolve(__dirname, '../../');
  const relativeRoot = path.relative(root, processRoot);
  if (relativeRoot.startsWith('../')) {
    thisFilename = '@aztec/guacamole-ui';
  } else {
    thisFilename = path.relative(processRoot, __filename);
  }
  return thisFilename;
};

const generateSassContent = (cssConfig) => {
  const variables = jsToSass(cssConfig);
  const thisFilename = getFileHeader();
  return `// auto-generated by ${thisFilename}
${variables}`;
};

const generateJsContent = (cssConfig) => {
  const thisFilename = getFileHeader();

  const content = Object.keys(cssConfig)
    .map((key) => `export const ${key} = ${prettyPrint(cssConfig[key])};`);

  return `// auto-generated by ${thisFilename}
${content.join('\n')}
`;
};

const getFileDest = ({
  output: {
    path: outputPath = path.resolve(__dirname, '../../src/styles'),
    variablesFilename = 'variables.scss',
  } = {},
}) => path.join(outputPath, variablesFilename);

export const generateSassVariablesSync = (config = {}) => {
  const cssConfig = mergeCssConfig(config.theme);

  const sassContent = generateSassContent(cssConfig);
  const fileDest = getFileDest(config);
  try {
    fs.writeFileSync(fileDest, sassContent);
    successLog('Sass variables file created', `path: ${fileDest}`);
  } catch (error) {
    errorLog(error);
    process.exit(1);
  }

  const jsContent = generateJsContent(cssConfig);
  const jsFileDest = fileDest.replace(/\.scss$/, '.js');
  try {
    fs.writeFileSync(jsFileDest, jsContent);
    successLog('Js variables file created', `path: ${jsFileDest}`);
  } catch (error) {
    errorLog(error);
    process.exit(1);
  }
};

export default async function generateSassVariables(config = {}) {
  const cssConfig = mergeCssConfig(config.theme);
  const content = generateSassContent(cssConfig);
  const fileDest = getFileDest(config);

  await fs.writeFile(fileDest, content, (error) => {
    if (error) {
      errorLog(error);
      process.exit(1);
    } else {
      successLog(
        'Sass variables file created',
        `  path: ${fileDest}`,
      );
    }
  });

  const jsContent = generateJsContent(cssConfig);
  const jsFileDest = fileDest.replace(/\.scss$/, '.js');
  await fs.writeFile(jsFileDest, jsContent, (error) => {
    if (error) {
      errorLog(error);
      process.exit(1);
    } else {
      successLog(
        'Js variables file created',
        `  path: ${jsFileDest}`,
      );
    }
  });
}
