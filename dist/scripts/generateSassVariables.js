"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateSassVariables;
exports.generateSassVariablesSync = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _jsToSass = _interopRequireDefault(require("./utils/jsToSass"));

var _log = require("./utils/log");

var _mergeCssConfig = _interopRequireDefault(require("./utils/mergeCssConfig"));

var _prettyPrint = _interopRequireDefault(require("./utils/prettyPrint"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var getFileHeader = function getFileHeader() {
  var processRoot = process.cwd();
  var thisFilename;

  var root = _path.default.resolve(__dirname, '../../');

  var relativeRoot = _path.default.relative(root, processRoot);

  if (relativeRoot.startsWith('../')) {
    thisFilename = '@aztec/guacamole-ui';
  } else {
    thisFilename = _path.default.relative(processRoot, __filename);
  }

  return thisFilename;
};

var generateSassContent = function generateSassContent(cssConfig) {
  var variables = (0, _jsToSass.default)(cssConfig);
  var thisFilename = getFileHeader();
  return "// auto-generated by ".concat(thisFilename, "\n").concat(variables);
};

var generateJsContent = function generateJsContent(cssConfig) {
  var thisFilename = getFileHeader();
  var content = Object.keys(cssConfig).map(function (key) {
    return "export const ".concat(key, " = ").concat((0, _prettyPrint.default)(cssConfig[key]), ";");
  });
  return "// auto-generated by ".concat(thisFilename, "\n").concat(content.join('\n'), "\n");
};

var getFileDest = function getFileDest(_ref) {
  var _ref$output = _ref.output;
  _ref$output = _ref$output === void 0 ? {} : _ref$output;
  var _ref$output$path = _ref$output.path,
      outputPath = _ref$output$path === void 0 ? _path.default.resolve(__dirname, '../../src/styles') : _ref$output$path,
      _ref$output$variables = _ref$output.variablesFilename,
      variablesFilename = _ref$output$variables === void 0 ? 'variables.scss' : _ref$output$variables;
  return _path.default.join(outputPath, variablesFilename);
};

var generateSassVariablesSync = function generateSassVariablesSync() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var cssConfig = (0, _mergeCssConfig.default)(config.theme);
  var sassContent = generateSassContent(cssConfig);
  var fileDest = getFileDest(config);

  try {
    _fs.default.writeFileSync(fileDest, sassContent);

    (0, _log.successLog)('Sass variables file created', "path: ".concat(fileDest));
  } catch (error) {
    (0, _log.errorLog)(error);
    process.exit(1);
  }

  var jsContent = generateJsContent(cssConfig);
  var jsFileDest = fileDest.replace(/\.scss$/, '.js');

  try {
    _fs.default.writeFileSync(jsFileDest, jsContent);

    (0, _log.successLog)('Js variables file created', "path: ".concat(jsFileDest));
  } catch (error) {
    (0, _log.errorLog)(error);
    process.exit(1);
  }
};

exports.generateSassVariablesSync = generateSassVariablesSync;

function generateSassVariables() {
  return _generateSassVariables.apply(this, arguments);
}

function _generateSassVariables() {
  _generateSassVariables = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var config,
        cssConfig,
        content,
        fileDest,
        jsContent,
        jsFileDest,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            config = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            cssConfig = (0, _mergeCssConfig.default)(config.theme);
            content = generateSassContent(cssConfig);
            fileDest = getFileDest(config);
            _context.next = 6;
            return _fs.default.writeFile(fileDest, content, function (error) {
              if (error) {
                (0, _log.errorLog)(error);
                process.exit(1);
              } else {
                (0, _log.successLog)('Sass variables file created', "  path: ".concat(fileDest));
              }
            });

          case 6:
            jsContent = generateJsContent(cssConfig);
            jsFileDest = fileDest.replace(/\.scss$/, '.js');
            _context.next = 10;
            return _fs.default.writeFile(jsFileDest, jsContent, function (error) {
              if (error) {
                (0, _log.errorLog)(error);
                process.exit(1);
              } else {
                (0, _log.successLog)('Js variables file created', "  path: ".concat(jsFileDest));
              }
            });

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _generateSassVariables.apply(this, arguments);
}